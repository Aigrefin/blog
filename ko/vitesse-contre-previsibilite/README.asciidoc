= Gestion de projet : choisir entre vitesse et planification
Julien Kirch
v0.1, 2017-01-25
:article_lang: fr
:article_description: Si vous ne connaisez pas vos objectifs, vous risquez de faire n'importe quoi

## Périmètre constant en agile

## Une équipe en flot continu

Une équipe agile autonome travaillant en flot continu est le système qui permet d'être le plus efficace :
dès qu'une user story (US) est terminée, elle est validée et la déployée, et l'item suivant est immédiatement démarré.

Concernant la priorisation, la seule question posée au PO est "je viens de terminer une US, quelle est la suivante ?".
Cela signifie qu'il·elle n'a pas besoin de faire de plans formel car il·elle peut ajuster ses priorités au fil de l'eau.

Il n'y a pas non plus besoin d'avoir des évaluation formelles des US.
Si les outils sont efficaces et les US assez découpées, le PO sait qu'en moyenne, quelques jours séparent le début du développement d'une US de son déploiement.
Si une US est prioritaire, il suffit de la mettre en haut de la pile.

Un·e product owner en mesure de prendre des décisions seul·e limite les besoins en synchronization avec l'extérieur, et avoir des user stories link:https://en.wikipedia.org/wiki/INVEST_(mnemonic)[indépendantes] limite les besoins en synchronization à l'intérieur de l'équipe.
Quand un problème se pose sur une US, cela ne bloque pas les développeurs travaillant sur les autres.

Il n'y a donc aucun surcoût de gestion : aucun effort n'est dépensé dans le seul but de piloter ou de suivre l'avancement.

Quand une organisation travaille sur un seul produit avec une seule équipe, elle est capable de mettre en place ce modèle et donc d'avancer très vite.
Si chaque US apporte une nouvelle fonctionalité aux utilisateur·rice·s, le produit s'enrichit de jour en jour.

## Une équipe en itération

Dans certaines méthodes comme SCRUM, l'équipe travaille en itérations.
En début d'itération le·a PO priorise ses demande, et les développeurs en choisissent un certains nombre qui définissent un périmètre sur laquelle elle va travailler.
Une des règles souvent énnoncée est "on ne change pas le périmètre en cours d'itération" : une fois le développement commencé, le·a PO n'est pas sensé ajouter ou supprimer des items.

Par rapport à la versio en flot continu, on perd donc en capacité d'adaptation, mais on ne voit pas forcément ce qu'on gagne.

Côté PO et scrum master, les itéations ont un avantage rarement exprimé directement, mais qui peut se deviner à une phrase souvent entendue : "en début d'itération, les développeurs s'engagent sur un périmètre".
Dans un développement en flot continu, le PO a peu de levier sur la vitesse de travail des développeur : comme il·elle·s travaillent sur une US, puis une autre, puis une autre, il n'y a pas de cadre auquel se repporter, il est donc difficile de lui mettre la pression.
Dans un mode itératif en revanche, il y a un levier naturel : le périmètre de l'itération.
Une fois défini ce périmètre, il s'agit
L'usage du link:https://fr.wikipedia.org/wiki/Burndown_chart[burndown chart], qui permet de suivre l'avancement, est un très bon levier.


## Des équipes

Quand plusieurs équipes dépendents les uns des autres, les choses se compliquent.

Le cas le plus simple est la dépendance entre équipes :
lorsqu'une équipe A a besoin d'une évolution dans un logiciel développé par une équipe B pour avancer.

Dans ce cas il y a un surcôut, pour se mettre d'accord sur ce qu'il faut faire et peut-être pour arbitrer les priorités.
Si l'équipe B peut commencer immédiatement le développement, ou en tout cas assez rapidement, les choses peuvent en rester là.

Dans le cas contraire, il est possible que A demande un calendrier prévisionnel à l'équipe B pour avoir une idée du moment où l'évolution sera terminée.
Le problème c'est que si l'équipe B n'est pas en mesure de répondre à ça.


Si l'équipe B ne commence immédiatement le développement de l'évolution, A va peut-être demander un calendrier prévisionnel pour sa

L'objectif est d'identifier à l'avance cette dépendance, avant que l'équipe de A n'ait commencé son développement.
La fonctionalité de A doit attendre, mais aucun temps n'est gaspillé.



Au pire, cela peut retarder la livraison du lot

 les conséquences sont limitées : cela peut retarder la livraison de l'epic dont il fait partie, mais aucun développeur ne va se retrouver bloquer

Quand un item de travail prend plus de temps que prévu, les effets sont limités cela n'a aucune autre conséquence : comme rien ne dépend de lui il ne retarde rien d'autre.

Optimiser un sytème en se basant sur la vitesse il peut y avoir deux sens.



== Présentation des algo

* Prévisible
* Rapide
*	Exemples : téléphone vs. courier

== Le problème

*	Ils se ressemblent mais sont différents
*	Exemple : buffer, passer du temps à prévoir, droit à l'erreur
*	C'est un continuum
*	Pas de bon ou de mauvais choix, ça dépend de tes objectifs
** Projet indépendanct
** Projet industriel ou coordination
* Problème : quand tu es à un autre endroit que tu ne le penses
** Tu utilises les mauvais outils
** Ça ne fonctionne pas et tu ne comprends pas pourquoi

== Pour les projets

*	Agile : optimiser pour la vitesse
*	Cycle en V et qualité par process : optimisé pour la prévisibilité
* Orga agile : s'organiser pour pouvoir faire de l'agile, ne plus avoir les contraintes du mode industriel
*	Beaucoup de personnes qui utilisent une méthode agile mais qui gardent les reflexes du V
**	Burn down chart, obsession de la vélocité régulière
*	Des process qui se font passer pour de l'agile, car c'est un buzzword, mais qui veulent de la prédictibilité
**	Scaled
* Certains des bénéfices de l'agile sont désirables, et certaines pratiques sont utiles même hors agile
* Mais si tu connais pas ta position, tu risques de ne pas comprendre ce qui se passe

== Conclusion
Sachez où vous êtes, et vérifiez régulièrement
