= Open-source = code + licence + communauté
Julien Kirch
v1.0, 2015-09-01

Quand on parle d'open source c'est beaucoup pour parler des licences et un peu du code mais beaucoup moins souvent des participants aux différents projets.

Les licences ouvertes donnent le droit aux utilisateurs de modifier les logiciels qu'ils utilisent.
Mais pour que les changements ainsi effectués profitent au maximum de monde,
il faut éviter que chacun ne travaille dans son coin, mais qu'ils se fassent de manière collaborative et s'additionnent et faire ainsi progresser le logiciel.

À l'opposé des logiciels fermés crées par des entreprises de manière pyramidale,
l'idéal-type du projet open source est développé par une communauté de contributeurs qui apportent tous leur pierre à l'édifice et qui peuvent tous donner leur avis.

Dans la réalité, les modèles de développement et donc les communautés différent beaucoup d'un projet à l'autre:
depuis les projets au fonctionnement opaque mais à licence ouverte aux projets très ouverts qui font tout pour accueillir de nouveaux membres.

Ces différences sont peu visibles aux non-initiés, mais elles sont très importantes pour se faire un avis sur un projet :

- parce que le label "open-source" a une valeur d'affichage, et que de savoir comment ce projet fonctionne permet de juger si un projet est légitime à profiter de ce label;
- pour choisir un projet plutôt qu'un autre lorsqu'on cherche un logiciel, que ce soit pour des raisons éthiques ou pour savoir si on peut compter sur le support de la communauté en cas de problème
- lorsqu'on a envie de contribuer à un projet, pour apprendre des choses ou parce qu'il vous intéresse, et qu'on veut savoir si c'est une bonne idée

Chaque projet a ses spécificités, mais quatre familles permettent de comprendre l'essentiel des fonctionnements :

== Le dépôt de code

Les projets ""à sens unique" ou le développement est fermé et où il est simplement possible de télécharger le code. Souvent ce code n'est pas utilisable directement car il est incomplet et/ou manque de documentation.

3 cas principaux :

=== Les minis projets perso

Les petits projets où une personne a développé quelque chose pour elle et se dit que ça pourrait servir à d'autres.
Elle est prête à le rendre accessible mais pas à fournir d'effort supplémentaire.
C'est une manière tout à fait légitime de faire de l'open source :
il s'agit d'une contribution  à but altruiste et, même si l'open source et un bon terrain de jeux pour essayer de faire les choses bien,
quand on développe quelque chose sur son temps libre, on n'est pas tenu link:http://www.drmaciver.com/2015/04/its-ok-for-your-open-source-library-to-be-a-bit-shitty/[d'avoir le même niveau de qualité que dans un cadre professionnel].

=== Ceux qui sont obligés

Les projets qui utilisent du code open-source et qui sont contraint par la licence à publier leurs modifications.
Il appliquent cette obligation a minima, certains link:http://floss.freebox.fr[volontairement] et d'autres link:https://sfconservancy.org/linux-compliance/about.html[sous la contrainte]. Dans ce cas là les entreprises communiquent généralement peu sur le sujet car – même si elles respectent la règle du jeu – elles profitent du travail d'un projet sans contribuer dans les mêmes proportions.footnote:[Il arrive parfois que des développeurs du projet d'origine utilisent du code ainsi publié en le réincorporant après adaptation.]

=== Les profiteurs

Les projets qui communiquent sur l'open-source pour capitaliser sur l'image mais qui dans la réalité appliquent un mode de développement fermé. Le cas le plus notable est link:https://source.android.com/source/code-lines.html[Android] où Google distribue certaines parties du code, et ne rend disponibles les nouveautés qu'après un certain temps.

== Le développement public

Les projets où on peut suivre le développement mais pas ou peu participer, ici trois grandes familles :

=== Les hameçonneurs

Il s'agit des projets où le développement d'un outil en open source fait partie de la stratégie économique d'une entreprise.
Ces modèles sont très à la mode chez les éditeurs de logiciels et peut prendre plusieurs formes, suivant les cas l'intérêt de l'éditeur n'est pas forcément aligné avec celui de la communauté.

==== La vente de support en cas de problème.

Dans de nombreuses entreprises de grande taille il est nécessaire d'avoir du support pour tous les logiciels qu'elle utilise pour avoir quelqu'un à appeler en cas de problème plutôt que de reposer uniquement sur ses compétences internes.
Pour minimiser ses coûts de support, l'entreprise qui développe le logiciel aura tout intérêt à ce qu'il soit bien documenté et comporte le moins de bugs possibles.

==== La vente de licences

Certaines licences comme la link:http://fsffrance.org/gpl/gpl-fr.fr.html[GPL] imposent des obligations aux utilisateurs, et notamment de redistribuer les modifications qu'ils effectuent sur ces logiciels s'ils vendent des produits qui les utilisent.
Or pour un certain nombre de raisons certaines entreprises préfèrent ne pas le faire.
Ainsi pour certains logiciels comme la base de donnée link:https://fr.wikipedia.org/wiki/MySQL[MySQL] il est possible de payer pour obtenir le droit d'utiliser l'outil sans avoir à appliquer ces obligations.

Cela signifie que pour contribuer au projet, il faut donner à l'éditeur le droit de revendre ainsi le résultat de son travail.

==== La vente d'accompagnement pour la mise en place

Pour des logiciels difficiles à mettre en œuvre et/ou pour lequel l'utilisateur n'a pas d'expérience il est nécessaire de se faire aider et l'éditeur peut fournir cette aide.
Dans ce cas il aura tout intérêt à ce que son produit soit compliqué et mal ou partiellement documenté, et pour aller pour cela jusqu'à refuser les contributions sur ces sujets.

=== Le cœur ouvert

Il s'agit de fournir le noyau du logiciel en open source mais de faire payer les fonctionnalités avancées.
Ici l'opposition avec la communauté pourra parfois être frontale pour décourager tout ce qui pourrait concurrencer la version payante,
en allant parfois jusqu'à supprimer des modules existants pour couper l'herbe sous le pieds de développeurs trop entreprenant. La base de donnée link:https://en.wikipedia.org/wiki/MySQL_Enterprise[MySQL] en est un bon exemple.

=== Les consortiums d'entreprises

Les projets réalisés par des consortiums d'entreprises comme  link:https://fr.wikipedia.org/wiki/GENIVI_Alliance[Genivi], choisir une licence open source est une garantie pour les participants, et le développement est ouvert car ça facilite les choses.
La participation des extérieurs est très variables : si parfois ils sont les bienvenus en général il est nécessaire d'adhérer au projet pour contribuer ce qui demande un investissement en temps et en argent.

=== Les étatiques

Les projets étatiques où le développement open-source est devenu la règle (ou même la loi)
mais qui sont des développements spécifiques et n'appellent donc pas à la réutilisation et donc à la contribution,
par exemple les link:https://github.com/alphagov[très nombreux projets du service numérique du gouvernement britannique].

=== Les publicitaires

Les entreprises qui publient des projets matures et poursuivent le développement de manière publique mais sans chercher activement à recruter des participants.
C'est un mouvement qui a pris de l'ampleur ces dernières années pour deux raisons principales : pour l'image de l'entreprise afin d'attirer des profils, et pour faire plaisir aux employés car cela leur donne de la visibilité, l'archétype étant link:https://github.com/Netflix[Netflix].footnote:[Le cas extrême est celui des entreprise qui ont décidé d'arrêter le développement d'un projet et qui choisissent de masquer cette décision en "confiant" le code à la communauté, comme cela a été fait pour link:http://www.zdnet.fr/actualites/oracle-confie-openoffice-a-la-fondation-apache-39761400.htm[OpenOffice].]

== La communauté des pairs

Il s'agit du modèle de développement classique des communauté open-source : des contributeurs, souvent avec des profils techniques, s'agrègent sur un projet et travaillent ensemble sans particulièrement se préoccuper du reste du monde.
Ceux qui ont l'envie et la patience peuvent devenir contributeurs à leur tour suivant des mécanismes de promotions ou de cooptation informels et en apprenant petit à petit le mode de fonctionnement du projet.

C'est un modèle qui a fait ses preuves, mais qui souffre de 2 défauts :

- Le cœur du projet étant souvent composé de développeurs, l'apport des membres non-développeur est moins valorisé et leur voix est moins entendue.
Ils sont donc moins incité à participer et/ou risquent de se décourager.
C'est un des mécanismes qui explique les manques en matière de documentation ou d'utilisabilité dont souffrent ces projets.
- Le modèle de cooptation informel, souvent trompeusement qualifié de méritocratie, encourage les comportements de "bandes de potes" qui mènent à des communautés sans diversité, voire link:https://modelviewculture.com/pieces/leaving-toxic-open-source-communities[toxiques], qui usent les personnes et découragent les nouveaux qui ne sont pas prêt à subir ce genre de choses. La communauté développant le cœur du système Linux est ainsi célèbre pour ses échanges au ton abrasif et parfois insultant, et le justifiant par le fait que la maitrise technique excuse tout.

== La communauté accueillante

Il s'agit des projets ayant fait le choix d'avoir un projet avec une communauté accueillante, et qui sont donc prêt à consacrer des efforts à cela.
Cela demande un travail continuel pour passer du temps avec les nouveaux venus et éviter que les vieux réflexes ne reviennent, et il faut parfois prendre des décisions difficiles,
comme lorsqu'il s'agit d'exclure des membres dont les contributions ont de la valeur mais dont le comportement n'est pas acceptable.

C'est une manière de faire qui s'est multipliée récemment, grâce aux critiques du modèle précédent, les projets link:http://emberjs.com[ember] et link:https://www.rust-lang.org/index.html[rust] en sont de bons exemples.
